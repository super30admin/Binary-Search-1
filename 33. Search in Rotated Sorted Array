//Time complexity: O(log n)
//Space complexity: O(1)
//Did this code successfully got submitted on leetcode: Yes


//1.Find that the element lies in sorted part or rotated part
//2.Implement binary search and find the location

class Solution {
    public int search(int[] nums, int target) {
        
        int l,r,mid;
        l=0;
        r=nums.length-1;
        
        while(l<=r){
            mid=(l+r)/2;
            
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>=nums[l]){
                if(target>=nums[l] && target<nums[mid])
                    r=mid-1;
                else
                    l=mid+1;
            }
            else{
                if(target<=nums[r] && target>nums[mid])
                    l=mid+1;
                else
                    r=mid-1;
            }
        }
        
        return -1;
    }
}
