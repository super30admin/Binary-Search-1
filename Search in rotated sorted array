// Time Complexity :O(logn)
// Space Complexity :0(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach in three sentences only
//employed binary search and used that the one side of a rotated sorted array is always sorted

class Solution {
    public int search(int[] nums, int target) {
        int left=0;
        int right= nums.length-1;
        int mid=0;
        while (left<=right){
            mid= left+ (right-left)/2;
            if (nums[mid]==target){
                return mid;
            }
           else if (nums[left]<=nums[mid]){
             if (nums[left]<=target && nums[mid]>=target){
                 right= mid-1;

             }
             else{left=mid+1;}
           }
           else{
               if(nums[mid]<=target && nums[right]>=target){
                   left=mid+1;
               }
               else{right=mid-1;}
           }
        }
        return -1;
    }
}
