
74: Search a 2D Matrix
Time complexity O(log(mn)) 

Space complexity :O(1).


// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :
leetcode number:

74: Search a 2D Matrix
// Your code here along with comments explaining your approach
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length==0)
            return false;
        
        int rows= matrix.length;
        int columns = matrix[0].length;
        
        int left=0;
        int right = rows*columns-1;
        
        while(left<= right){
            int midpoint = left + (right-left)/2;
            int midpoint_element = matrix[midpoint/columns][midpoint%columns];
            if(midpoint_element == target){
                return true;
            }
            else if(target< midpoint_element){
                right= midpoint-1;
                
            }
            else if(target > midpoint_element){
                left = midpoint+1;
            }
            }
        return false;
        }
    }
    
    
    
    
    
    33: search in sorted array
    
    
    
    class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums. length == 0) return -1;
       
        int left = 0;
        int right = nums.length-1;
        
        while(left < right){
            int mp = left + (right-left) / 2;
            if(nums[mp] > nums[right])
            {
                left = mp+1;
            } else {
                right = mp;
            }
            }
        int start = left;
        left=0;
        right= nums.length-1;
        
        if(target>= nums[start] && target<=nums[right]){
            left=start;
        }
        else{
            right= start;
        }
        
        while(left<=right){
            int mp= lefy +(right-left)/2;
            if(nums[mp] == target){
                return mp;
                
            }else if(nums[mp] < taget){
                left= mp+1;
            } else
            {right=mp-1;}
      }
        }
   return -1;
        }
       
}



