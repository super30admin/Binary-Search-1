// Time Complexity : 0(Log(m+n))
// Space Complexity :0(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :n/a


// Your code here along with comments explaining your approach in three sentences only
// I used binary search twice. Firstly, i used binary search to find the target row and then to find the target column.

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int length=matrix[0].length;
       
       int top=0;
       int bottom= matrix.length-1;
       int mid=0;
       int target_row=-1;
       while (top<=bottom){
           if (bottom==0){target_row=0;
           break;}
           mid= top+ (bottom-top)/2;
          if (top==mid  ){
              if (target>=matrix[mid][0] && target<=matrix[mid][length-1]){
                  target_row= mid;
              }
              if (target>=matrix[mid+1][0] && target<=matrix[mid+1][length-1]){
                  target_row= mid+1;
              }
              break;
          }
           if (target<matrix[mid][0]){
               bottom=mid-1; 
           }
           if (target>matrix[mid][0]){
               top=mid;
           }
           if (target==matrix[mid][0]){
               target_row= mid;
               break;
           }

       }
       if (target_row==-1) return false;
       int left=0;
       int right=length-1;
       while(left<=right){
           mid=left+(right-left)/2;
           if (target == matrix[target_row][mid]){
               return true;
           }
           else if (target>matrix[target_row][mid]){
               left=mid+1;
           }
           else {right=mid-1;}
       }
       return false;
    }
}
