// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Tried many approaches and have a doubt in a few.


// Your code here along with comments explaining your approach

1. Find the pivot - index where the array was rotated
2. If pivot element is equal to target then return its index
3. Then subsequently search in left or right array depending on the condition
4. left subarray= if target>=nums[0] and target <nums[pivot]
5. right subarray if, target>nums[mid] and target <=nums[right]  
var search = function(nums, target) {
     let left = 0, right = nums.length -1
    
    while(left <= right) {
        let mid = Math.floor((left+right)/2)
        
        if(nums[mid] === target) { return mid } 
        else if(nums[mid] >= nums[left]) {
            if(target >= nums[left] && target < nums[mid]) { 
        
                right = mid -1
            } else {
              
                left = mid +1
            }
        } else { 
           
            if(target > nums[mid] && target <= nums[right]) {
                left = mid +1
            } else {
                right = mid -1
            }
            
        }
    }
    return -1
};