// Time Complexity : O(logN)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Had to look video again for better understanding. Need to practice again.


// Your code here along with comments explaining your approach
Approach: 1. (lowVal < midVal) //Check if array is sorted 
             {     //Decide on where target should be :
                if(target >= lowVal AND target < midVal){ GO to left Half }
                else GO to Right half
              }else{  //if NOT sorted ARRAY
                if(target>mid && target <=high) Increment Low
                else decrement high
              }

/*DO IT AGAIN*/

class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        
        if(nums==null || nums.length==0){
            return -1;
        }
        
        
        while(low <= high){
            int mid = low + (high - low)/2;
            
            if(nums[mid]==target){
                return mid;
            }else if(nums[mid] >= nums[low] ){   //deciding directions--> implies array is sorted than check for target
                  if(target>=nums[low] && target < nums[mid]){
                      high = mid - 1;
                  }else{
                     low = mid + 1;
                  }
            }else{
                if(target>nums[mid] && target <= nums[high]){
                    low = mid + 1;
                }else{
                    high = mid - 1;
                }
                
            }
        }
            
        return -1;
    }
}
