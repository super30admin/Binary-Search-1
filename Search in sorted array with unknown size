// time complexity: O(logn)
// space complexity: O(1)
// Since array is sorted and has no duplicate elements, we will try to find the window where target could be present
//once we find the window, we will do binary search
// yes I solved on leetcode
class Solution {
    public int search(ArrayReader reader, int target) {
        int left = 0;
        int right = 1;
        
        // we try to find the window
        while(target > reader.get(right)){
            left = right;
            right = right*2;
        }
        // binary search
        while(left <= right){
            
            int mid = left + (right-left)/2;
            if(reader.get(mid) == target) return mid;
            
            if(reader.get(mid) < target) left = mid+1;
            else if(reader.get(mid) > target) right = mid-1;
            
        }
        
        return -1;
        
    }
}
