# -*- coding: utf-8 -*-
"""Binary Search 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GxPkZkmuFvLYzKhNqR_e3L5L40zHTgYi
"""

Search in a Rotated Sorted Array

nums = [4,5,6,7,0,1,2]
target = 6
def search(nums,target):
  left = 0
  right = len(nums) - 1
  while left <= right:
      mid = (left + right) // 2
      if nums[mid] == target:
          return mid
      if nums[mid] >= nums[left]:
          if target>=nums[left] and target<nums[mid]:
              right = mid-1
          else:
              left = mid+1     
      else:
          if target>nums[mid] and target<=nums[right]:
              left = mid+1
          else:
              right = mid-1           
  return -1

print(search(nums,target))

Search in Infinite sorted array:

def binarysearch(arr,low,high,target):
  while low <= high:
    mid = (low + high) // 2
    if arr[mid] == target:
      return mid
    elif arr[mid] > target:
      high = mid - 1
    else:
      low = mid + 1
  return -1
    

def findPos(arr, target):
  low = 0
  high = 1
  val = arr[low]
  while val <= target:
    low = high
    high = 2 * high
    val = arr[high]
  return binarysearch(arr,low,high,target)



arr = [3, 5, 7, 9, 10, 90, 100, 130, 140, 160, 170]
ans = findPos(arr,100)
print(ans)

"""Search a 2D Matrix"""

def searchMatrix(matrix, target):
  if not matrix or target is None:
            return False

  rows, cols = len(matrix), len(matrix[0])
  low, high = 0, rows * cols - 1
  
  while low <= high:
      mid = (low + high) // 2
      num = matrix[mid // cols][mid % cols]
      if num == target:
          return True
      elif num < target:
          low = mid + 1
      else:
          high = mid - 1
  
  return False


matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]]
target = 3
print(searchMatrix(matrix, target))