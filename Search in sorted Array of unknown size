// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach

class Solution {
    int limiter = 2;
    int mid;
    public int binarySearch(ArrayReader reader,int begin,int end,int tar){
        if(begin>end){
            return -1;
        }
        mid = Math.floorDiv(begin+end,2);
        if(reader.get(mid)==tar){
            return mid;
        }
        else if(reader.get(mid)<tar){
            return binarySearch(reader,mid+1,end,tar);
        }
        else{
            return binarySearch(reader,begin,mid-1,tar);
        }
    }
    public int search1(ArrayReader reader,int target,int limiter){
        if(target > reader.get(limiter-1)){
            return search1(reader,target,limiter*2);
        }
        else{
            return binarySearch(reader,0,limiter,target);
        }
    }
    public int search(ArrayReader reader, int target) {
        return search1(reader,target,limiter);
    }
}