// Time Complexity : o(log n)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// Your code here along with comments explaining your approach
// https://leetcode.com/problems/search-a-2d-matrix/submissions/

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        //treat 2D matrix as 1D and do a binary search
        if(null == matrix || matrix.length == 0 || matrix[0].length == 0) return false;
        int m = matrix.length;
        int n = matrix[0].length;
        int low = 0;
        int high = m*n - 1;
        
        while(low <= high){
            int mid = low + (high - low)/2;
            int r = mid / n;
            int c = mid % n;
            if(matrix[r][c] == target) return true;
            if(matrix[r][c] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return false;
    }
}

--
// Time Complexity : o(log n)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// Your code here along with comments explaining your approach
// https://leetcode.com/problems/search-in-rotated-sorted-array/

class Solution {
    //Step 1: Check which side is sorted
    //Step 2: Check if the element is in the sorted side or not
    public int search(int[] nums, int target) {
        if(null == nums || nums.length == 0) return -1;
        int low = 0;
        int high = nums.length - 1;
        while(low <= high){
            int mid = low + (high-low)/2;
            if(nums[mid] == target) return mid;
            
            if(nums[low] <= nums[mid]){ //left side is sorted
                //check if element is in the sorted side or not
                if(nums[low] <= target && nums[mid] > target){
                    high = mid - 1;
                } else{
                    low = mid + 1;
                }
            } else { //right side is sorted
                if(nums[mid] < target && nums[high] >= target){
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
}

