// Time Complexity  - O(log n)
// Space Complexity - 0(1) - Constant space
// Did this code successfully run on Leetcode : Yes successfully ran
// Any problem you faced while coding this : No

/* Your code here along with comments explaining your approach

In a rotated sorted array, there is a pattern one side of elements between mid value is always sorted.
It could be either left side or right side. There are two binary searches with this approach. 

In order to check the elements sorted --> (element at index low <  element at index high).
If the left side elements are sorted, there are two conditions to check 
	1) element can be present - check (target element >= element at index low) and 
									  (target element <= element at index high)
							 	then --> high will become mid-1
	2) element not present in the left side
								then --> low will be mid+1
								
else the right side is sorted, the two conditions to check are 
	1) element can be present - check (target >= element at mid ) and
									  (target <= element at index high)
								then --> low will be mid+1	 
	2) element not present, then  --> high will be mid-1							  
*/	

public class RotatedSortedArray {

	public int search(int[] nums, int target) {

		if(nums == null || nums.length == 0)
			return -1;
		int low = 0, high = nums.length - 1;

		while (low <= high) {
			int mid = low + (high - low) / 2;

			if (nums[mid] == target)
				return mid;

			else if (nums[low] <= nums[mid]) {
				if(target >= nums[low] && target <= nums[mid]) {
					high = mid - 1;
				} else {
					low = mid + 1;
				}
			}else {
				if(target>=nums[mid] && target <= nums[high]) {
					low = mid+1;
				}else {
					high = mid-1;
				}
			}

		}
		return -1;
	}

	public static void main(String[] args) {

		int[] nums = { 3,4,5,6,7,8,1,2};
		int target = 1;

		RotatedSortedArray r = new RotatedSortedArray();
		int index = r.search(nums, target);

		System.out.println(index);
	}

}
