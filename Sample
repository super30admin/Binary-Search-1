//Search a 2D Matrix
// Time Complexity :O(m+logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach

 public class Solution {

 public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length; 
        int i = 0;
        while(i < m){
            if(target <= matrix[i][n-1]){ // Target can be in this row only.
                break;
            }
            else if(target > matrix[i][n-1] && i == m - 1){ // If target is greater than the last element, it does not exitst in the array.
                return false;
            }
            else{
                i++;
            } 
        }
        // Binary Search on the ith row
        int l = 0, r = n - 1;
        while(l <= r){
            int mid = (l+r) / 2;
            if(target == matrix[i][mid]){
                return true;
            }
            else if(target < matrix[i][mid]){
                r = mid - 1;
            }
            else if(target > matrix[i][mid]){
                l = mid + 1;
            }
        }
        return false;
    }
    
}
class Main{
    public static void main(String args[]){

        int[][] matrix = {{1,3,5,7},{10,11,16,20},{23,30,34,60}};
        int target = 3;
        Solution s = new Solution();
        boolean result;
        result=s.searchMatrix(matrix,target);
        System.out.println(result);
    }

}

// I tried the other two problems but was not able to code

