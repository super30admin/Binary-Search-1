// Time Complexity : O(long)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach

class Solution {
    public int search(int[] nums, int target) {
        if(nums.length ==0 || nums == null)
            return -1;
    int left = 0;
        int right = nums.length-1;
        if(nums[0] < nums[nums.length-1]){
            
        }
        while(left<=right){
            int mid = left + (right-left) / 2;
            if(nums[mid] == target)
                return mid;
            
            else if(nums[mid] >= nums[left]){
                if(target>=nums[left] & target < nums[mid])
                    right = mid-1;
                else left = mid+1;
            
            }
            else{
                if(nums[mid] < target && target<=nums[right])
                    left = mid+1;
                else
                right = mid-1;
            }
        }
        
        return -1;
    }
}





//Binary Search 2 .. find an element in an array of unwon length
/**
 * // This is ArrayReader's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface ArrayReader {
 *     public int get(int index) {}
 * }
 */

class Solution {
    public int search(ArrayReader reader, int target) {
        int left = 0;
        int right = left+1;
        
        while(reader.get(right) < target){
            right = right*2;
            if(reader.get(right) > target)
                break;
            left = right;
         }
        
        while(left<=right){
            int mid = (left+right)/2;
            
            if(reader.get(mid) == target)
                return mid;
            else if(reader.get(mid) < target)
                left = mid+1;
            else right = mid-1;
         }
    
        return -1;
    }
}