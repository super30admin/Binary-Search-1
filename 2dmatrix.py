# -*- coding: utf-8 -*-
"""2DMatrix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YVhBfs2B-QmUDuLRjpTcTuvIDnBLzJul
"""

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        
        if not matrix:
            return False
        if target is None:
            return False
        row = len(matrix)       # Number of Rows of the matrix...
        col = len(matrix[0])    # Number of Columns of the matrix...
        # Initialize beg index of the considered 1D matrix (i.e: 0)...
        low = 0
        # Set end index of the considered 1D matrix (i.e: row*col)...
        high = (row*col) - 1 
        # Now apply binary search & Run a while loop...
        while low <= high:

            mid = low + (high - low) // 2

            num = matrix[int(mid / col)][int(mid % col)]

            if num == target:
                return True
            if num < target:
                low = mid + 1
            else:
                high = mid - 1
        return False