//Problem - https://leetcode.com/problems/search-a-2d-matrix/
// Time Complexity : O(log(m*n))
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
//used binary search method on full matrix(no of rows * no of cols)
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        //checking prelimary condition
        if(matrix == null || matrix.length ==0) return false;
        
        int noOfRows = matrix.length;
      
        int noOfCols = matrix[0].length;
      
        int low =0;
        
        int high= noOfRows*noOfCols-1;
        
        
        while(low <=high)
        {
            int mid = low+(high-low)/2;
            int row= mid/noOfCols;
            int col = mid%noOfCols;
            if(matrix[row][col] == target) return true;
            
            else if(target < matrix[row][col])
            {
                high = mid-1;
            }
            
            else low = mid+1;
        }
        return false;
    }
}



//problem - https://leetcode.com/problems/search-in-rotated-sorted-array/
// Time Complexity : O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
//used binary search method
class Solution {
    public int search(int[] nums, int target) {
        
         int low = 0;
        int high = nums.length - 1;
        
        while(low<=high)
        {
            int mid = low + (high-low)/2;
            
            if(nums[mid] == target) return mid;
            
            else{
                if(nums[low] <= nums[mid])
                {
                    if(nums[low] <= target && target < nums[mid])
                    {
                        high = mid-1;
                    }
                    else{
                        low = mid+1;
                    }
                }
                else{
                    if(nums[mid] < target && target<= nums[high])
                    {
                        low = mid+1;
                    }
                    else{
                        high = mid-1;
                    }
                }
            }            
            
        }
        
        
        return -1;
    }
}


//problem - https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size/
// Time Complexity : O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
//used binary search method

class Solution {
    public int search(ArrayReader reader, int target) {
        int low =0;
        int high = 1;
        
       while(reader.get(high) < target)
       {
           low = high;
           high = 2* high;           
           
       }
        return binarySearch(reader , target , low , high);
        
    }
    
    private int binarySearch(ArrayReader reader , int target , int low , int high)
    {
        while(low<=high)
        {
            int mid = low + (high-low)/2;
            if(reader.get(mid) == target) return mid;
            else if (reader.get(mid)<target)
            {
                low = mid+1;
            }
            else{
                high = mid-1;
            }
        }
        return -1;
    }
}