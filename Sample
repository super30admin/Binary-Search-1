// Time Complexity : o(log(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach


// Search in a Sorted Array of Unknown Size


/**
 * // This is ArrayReader's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface ArrayReader {
 *     public int get(int index) {}
 * }
 */

class Solution {
    public int search(ArrayReader reader, int target) {
        
        int low = 0;
        int high = 1;
        
        while(reader.get(high)<target){
            low = high;
            high = high * 2;
        }
        
        while(low<=high) {
            int mid = low + (high-low)/2;
            if(reader.get(mid)==target)
                return mid;
            if(reader.get(mid)>target)
                high = mid-1;
            else
                low = mid+1;
        }
        
        return -1;
    }
}









// Search in Rotated Sorted Array

class Solution {
    public int search(int[] nums, int target) {
        int low = 0;
        int high = nums.length-1;
        
        while(low<=high) {
            int mid = low + (high-low)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[mid]>=nums[low]){
                if(target>=nums[low] && nums[mid]>target)
                    high = mid - 1;
                else
                    low = mid + 1;
            }else{
                if(nums[mid]<target && target <= nums[high])
                    low = mid + 1;
                else
                    high = mid - 1;
            }
        }
        
        return -1;
    }
}


*************************************************************************
// Search a 2D Matrix


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        
        if(m==0)
            return false;
        
        int n = matrix[0].length;
        
        int high = m*n-1;
        int low = 0;
        
        while(low<=high) {
            int mid = (low + high)/2;
            int row = mid/n;
            int col = mid%n;
            
            if(matrix[row][col]==target)
                return true;
            else if(matrix[row][col]>target)
                high = mid-1;
            else
                low = mid+1;
        }
        
        return false;
    }
} 
