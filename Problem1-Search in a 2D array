// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : 1st one was accepted but not the second one.
// Any problem you faced while coding this : Had to do a lot of dry runs and implementations to understand how to solve it efficiently. Also, it took me a while to understand the approach. 


// Your code here along with comments explaining your approach

var searchMatrix = function(matrix, target) {
    //Solution1: 
//     for(let i =0 ;i < matrix.length;i++){
//         for(let j =0;j<matrix[i].length;j++){
//             if(target==matrix[i][j]){
//                 return true;
//             }
            
//         }
//     }
   //------------------------------------------------------- 
// Solution 2: 
    
   // Find the row first in which element could be present
    
    const rowUsed = function rowSearch(){
     for (let i = 0 ;i < matrix.length;i++){
       if(target===matrix[i][0]){
         return false;
       }
       else if (target < matrix[i][0] ){
          return i-1;
        
       }
      
   }
 
  } 

// Implement binary search on that row


   const m=rowUsed();


  let low=0, high = matrix[m].length-1;
    
    while (low <= high) {
    const mid = Math.floor((low + high) / 2);
    if (matrix[m][mid] < target) {
      low = mid + 1;
    } else if (matrix[m][mid] > target) {
      high = mid - 1;
    } else return true;
  }
  return false; 
};

