// Problem 1
// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
// Algorithm
// 1 - declaring start and end
// 2 - while condition
// 3 - comparison conditions to find if left sorted or right sorted and check if the target lies in the sorted or no
// 4 - if not found
class Solution {
    public int search(int[] nums, int target) {
        // 1
        int start = 0;
        int end = nums.length - 1;
        
        // 2
        while (start <= end) {
            int mid = start + (end - start) / 2;
            
            // 3
            if (nums[mid] == target) {
                return mid;
            } else if (nums[start] <= nums[mid]) {
                if (target >= nums[start] && target <= nums[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {
                if (target >= nums[mid] && target <= nums[end]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
        }
        
        // 4
        return -1;
    }
}

// Problem 2
// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
// Algorithm
// 1 - initialize high = 2
// 2 - find infinity by multiply end by 2
// 3 - perform binarySearch with start = 0 and end = (value found in step 2)
/**
 * // This is ArrayReader's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface ArrayReader {
 *     public int get(int index) {}
 * }
 */

class Solution {
    public int search(ArrayReader reader, int target) {
        int start = 0;

        // 1
        int end = 1;
        
        // 2
        while(reader.get(end) <= target) {
            end = end * 2;
        }
        
        return binarySearch(reader, target, end);
    }
    
    // 3
    public int binarySearch(ArrayReader reader, int target, int end) {
        int start = 0;
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            
            if (reader.get(mid) == target) {
                return mid;
            } else if (target <= reader.get(mid)) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        
        return -1;
    }
}