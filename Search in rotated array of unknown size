// Time Complexity : O(logN)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : No, Requires premium subscription
// Any problem you faced while coding this : 


// Your code here along with comments explaining your approach
Approach: 1. Use arrayReader API to fetch element and increase high by 2  for O(logN) complexity

class Solution {
    public int search(ArrayReader reader, int target) {
        int low = 0;
        int high = 1;
        
       while(target >= reader.get(high)){
            low = high;
            high = high*2;
       }
       
       return binaryUnknownSearch(low, high, target, arrayReader);
       }
       
       public int binaryUnknownSearch(int low, int high, int target, ArrayReader reader){
            
            while(low <= high){
                
                int mid = low + (high - low)/2;
                
                if(target==reader.get(mid)){
                    return mid;
                }else if(target > reader.get(mid)){
                    low = mid + 1;
                }else{
                    high = mid - 1;
                }
            }
       
            return -1;
        }
    
}
