# -*- coding: utf-8 -*-
"""Searchin2D.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QwkKfIkqHc4ZM9lo-LtSLlglmILMsMsY
"""

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        
        n = len(matrix[0])#column
        m = len(matrix)#row
        
        if (not matrix):
            return
        
        low = 0
        high = (m*n-1)
        
        while(low<= high):
        
            mid = (low + high)//2
            i = int(mid  / n)
            j = int(mid %  n)
            if(matrix[i][j] == target):
                return True
            elif(matrix[i][j]>target):
                high = mid -1
            else:
                low= mid + 1
                
        return False
         
        
#Time Complexity : O(log(mn))
#Space Complexity : O(1)
#Did this code successfully run on Leetcode : yes
#Any problem you faced while coding this : No


#Your code here along with comments explaining your approach
#Treating a two-D array as one-D array and using "/" and "%" operator to access elemtns and than applying binary search