Search in Rotated Sorted Array
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        low=0
        high=len(nums)-1
        while low<=high:
            mid=(low+high)//2
            if target==nums[mid]:
                return mid
            if nums[low]<=nums[mid]:
                if nums[low]<=target and target<nums[mid]:
                    high=mid-1
                else:
                    low=mid+1
            else:
                if target>nums[mid] and target<=nums[high]:
                    low=mid+1
                else:
                    high=mid-1
        return -1
                
Search a 2D Matrix
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        m=len(matrix)
        n=len(matrix[0])
        high=(m*n)-1
        low=0
        while low<=high:
            mid=(low+high)//2
            r1=mid//n
            c1=mid%n
            if matrix[r1][c1]==target:
                return True
            elif matrix[r1][c1]<target:
                low=mid+1
            else:
                high=mid-1
        return False


