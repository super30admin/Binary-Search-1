// Time Complexity : o(n+m)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach in three sentences only
// starting with matrix [0][len] , I checked if the target is less than the last element of that row.
// if yes, then target element must be present in that row. increment column value to compare next value.
// if no, then target element is not present in that row. Increment row value to check in lower rows.
// We can also do this using binary search.
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {

        int col = matrix.length;
        int row = matrix[0].length;
        int i = 0;
        int j=0;
        while(i<col && j<row){
            if(matrix[i][j]==target){
                return true;
            }
            if(target<=matrix[i][row-1]){
                j++;
            }
            else{
                i++;
            }
        }
        return false;
    }
}