// Time Complexity :O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach
Rotated Array
class Solution {
    public int search(int[] nums, int target) {
        int start =  0;
        int end = nums.length-1;
        while(start<=end)
        {
            int mid = start+(end-start)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
            if(nums[mid]<=nums[end])//right sorted array
            {
                if(nums[mid]<target&&target<=nums[end])//target is in the range of right sorted array
                {
                    start = mid + 1;
                }
                else
                {
                    end = mid-1;
                }
            }
                else //left sorted array
                {
                    if(nums[start]<=target&&target<nums[mid])//target is in the range of left sorted array
                {
                    end = mid-1;
                }
                else
                {
                    start = mid+1;
                }
            }
        }
        return -1;
    }
}
        
        
        
        