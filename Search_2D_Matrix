// Time Complexity : O(log(m * n))
// Space Complexity : O(1)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No

//Approach
/*
Used binary search as it takes constant time complexity and the given matrix is assured to be sorted. To get the index of mid value :-
- for getting row index, mid should be divided by column size
- column index is the remainder of mid value to the column size
If the mid element is less than the required element, low index should be updated to mid + 1 and if the mid element is greater, high value should be updated to mid - 1
Applying this recursively will check if the element is found and return true if it is found.
If the element is not found, it returns false.
*/

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int low, high, mid;
        low = 0;
        high = (matrix.size() * matrix[0].size()) - 1;
        
        while(low <= high) {
            mid = low + (high - low) / 2;
            int row = mid / matrix[0].size();
            int col = mid % matrix[0].size();
            
            if(matrix[row][col] == target) {
                return true;
            } else if(matrix[row][col] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return false;
    }
};