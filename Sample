1. Problem: Search a 2D Matrix

// Time Complexity : log(mn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach



class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int col = 0;
        for(int i=0;i<matrix.length;i++){
            int rowsize = matrix[i].length;
            
            if(target <= matrix[i][rowsize-1]){
                col = i;
                break;
            }
            
        }
        for(int j=0;j<matrix[col].length;j++){
            if(target == matrix[col][j]){
                return true;
            }
        }
        return false;
    }
}


2. Problem: Search in Rotated Sorted Array

// Time Complexity : log(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

class Solution {
    public int search(int[] nums, int target) {
        
        int left=0;
        int right = nums.length-1;
        
        while(left<right){
            int mid = left+(right-left)/2;
            
            if(nums[mid]>nums[right]){
                left = mid + 1;
            }else{
                right = mid;
            }
        }
        
        int start = left;
        left = 0;
        right = nums.length-1;
        
        if(target>=nums[start] && target<=nums[right]){
            left = start;
        }else{
            right = start;
        }
        
        while(left<=right){
            int midp = left + (right-left)/2;
            if(nums[midp]==target){
                return midp;
            }else if(nums[midp]<target){
                left= midp+1;
            }else {
                right = midp-1;
            }   
        }
        return -1;
        
    }
}

3. Problem: Search in a Sorted Array of Unknown Size

// Time Complexity : log(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

/**
 * // This is ArrayReader's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface ArrayReader {
 *     public int get(int index) {}
 * }
 */

class Solution {
    public int search(ArrayReader reader, int target) {
        int left = 0;
        int right = 1;
        
        while(reader.get(right)<target){
            left = right;
            right = right*2;
        }
        
        // while(left<=right){
        //     int mid =left+ (right-left)/2;
        //     if(target == reader.get(mid)){
        //         return mid;
        //     }else if(target < reader.get(mid)){
        //         right = mid-1;
        //     }else{
        //         left = mid+1;
        //     }
        // }
        // System.out.println(reader.get(4));
        // System.out.println(left+" "+right+" "+target);
        // return -1;
        
        return binarySearch(reader,left,right,target); 
        
       
    }
     public int binarySearch(ArrayReader arr, int l, int r, int x) 
    { 
        if (r >= l) { 
            int mid = l + (r - l) / 2; 
            if (arr.get(mid) == x) 
                return mid; 
            if (arr.get(mid) > x) 
                return binarySearch(arr, l, mid - 1, x); 
  
            return binarySearch(arr, mid + 1, r, x); 
        } 
        return -1; 
    }
}