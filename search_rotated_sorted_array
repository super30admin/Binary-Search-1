// Time Complexity : O(logN)
// Space Complexity : O(1)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No
// Approach
/*
first check : if the target element is in the range of sorted array, if yes, moves towards that side and do the binary search
    else move to the other side and do the binary search

If element is not found, while loop terminates after checking all the possible range elements and returns -1
*/

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size() - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] == target) {
                return mid;
            }
            if(nums[low] <= nums[mid]) {
                if(target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                if(target > nums[mid] && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
};