{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    public boolean searchMatrix(int[][] matrix, int target) \{\
        // null case\
        if(matrix == null || matrix.length == 0)\{\
            return false;\
        \}\
        // initialize low and high pointer\
        int m = matrix.length, n = matrix[0].length;\
        int low = 0, high = m*n - 1;\
        // search the element in imaginary matrix array\
        while(low <= high)\{\
            int mid = low + (high-low)/2;\
            int r = mid/ n;\
            int c = mid% n;\
            if(matrix[r][c] == target)\{\
                return true;\
            \} else if(matrix[r][c] > target)\{\
               \
                high = mid-1;\
                \
            \} else\{\
               low = mid+1; \
            \}\
        \}\
        return false;\
    \}\
\}\
//time complexity: O(log(mn))\
//Space Complexity: O(1) \
// Did this code successfully run on Leetcode : Yes}