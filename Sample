// Time Complexity : O(log n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach in three sentences only

class Solution {
    public int search(int[] nums, int target) {

        int l = 0;
        int h = nums.length-1;

        while (l <= h) {

            int mid = l + (h - l)/2;

            if (nums[mid] == target) {
                return mid;
            }

            if (nums[l] <= nums[mid]) {
                if (nums[l] <= target && target < nums[mid]) {
                    h = mid - 1;
                }else{
                    l = mid + 1;
                }
            } else{
                if (nums[mid] <= target && target <= nums[h]) {
                    l = mid + 1;
                } else {
                    h =  mid - 1;
                }
            }

        }
        return -1;
    }
}

// Time Complexity : O(log m*n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {

       int n = matrix[0].length;
       int m = matrix.length;

       int l = 0;
       int r = m*n-1;

       while (l <= r){

           int x = (l + r)/2;
           int mid = matrix[x/n][x%n];

           if (target == mid){
               return true;
           } else {
               if (target < mid){
                   r = x-1;
               }else {
                   l = x+1;
               }
           }
       }
       return false;
    }
}

// Time Complexity : O(logm + logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

/**
 * // This is ArrayReader's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface ArrayReader {
 *     public int get(int index) {}
 * }
 */

 class Solution {
    public int search(ArrayReader reader, int target) {
        
        if (reader.get(0) == target) return 0;
        
        int l = 0;
        int r = 1;

        while (reader.get(r) < target) {
            l = r;
            r = 2*r;
        }

        while (l <= r) {
            int mid = l + (r-l) / 2;
            if (reader.get(mid) == target) {
                return mid;
            } else if (reader.get(mid) > target) {
                r = mid -1;
            } else {
                l = mid + 1;
            }
        }
        return -1;
    }
}