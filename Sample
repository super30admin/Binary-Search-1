# // Time Complexity : o(logN)
# // Space Complexity : No Extra Space
# // Did this code successfully run on Leetcode : Yes
# // Any problem you faced while coding this : No


# // Your code here along with comments explaining your approach

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        low = 0
        high = len(nums)-1
        while low <= high:
            # finding mid
            mid = (high+low)//2
            if (nums[mid]==target): 
                return mid
            # checking for left side of the mid
            elif (nums[low]<=nums[mid]):
                if (target >= nums[low] and target < nums[mid]):
                    high = mid-1 
                else:
                    low = mid+1
            # checking for right side of the mid
            else:
                if (target > nums[mid] and target <= nums[high]):
                    low = mid+1
                else:
                    high=mid-1
        return -1