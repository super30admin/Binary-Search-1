//search in rotated sorted array
// Time Complexity :O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach
class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high= nums.length-1;
        while(low<=high)
        {
            int mid= (high+low)/2;
             if (target == nums[mid]) {
                return mid;
            }
            if (nums[mid] <= nums[high]) {

                // right half of the array is sorted
                if (target > nums[mid] && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
            else {

                // left half of the array is sorted
                if (target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
            
        }
        return -1;
    }
}

//Finding first and last position of element in sorted array
// Time Complexity :O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :if(mid==high || nums[mid+1]!=target) if the conditions are in reverse order there is a run time error

// Your code here along with comments explaining your approach
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first= Firstposition(nums,target);
        int last= Lastposition(nums,target);
        
        return new int[] {first,last};
        
        
    }
    private int Firstposition(int[] nums ,int target){
         int low=0;
         int high=nums.length-1;
        
        while(low<=high)
        {
            int mid= low + (high-low)/2;
            if(nums[mid]==target)
            {
                if(mid==low || (nums[mid-1]!=target))
                    return mid;
                else
                    high=mid-1;
            }
            else if(nums[mid]>target)
                high= mid-1;
            else 
                low=mid+1;
        }
        return -1;
    }
     private int Lastposition(int[] nums ,int target){
         int low=0;
         int high=nums.length-1;
        
        while(low<=high)
        {
            int mid= low+(high-low)/2;
            if(nums[mid]==target)
            {
                if(mid==high || nums[mid+1]!=target)
                    //if the conditions are in reverse order there is a run time error occuring
                    return mid;
                else
                    low=mid+1;
            }
            else if(nums[mid]<target)
                low= mid+1;
            else 
                high=mid-1;
        }
        return -1;
    }

}
//search in a sorted array of unknown length
// Time Complexity :O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :No

// Your code here along with comments explaining your approach
import java.io.*;

class search {
	public static void main (String[] args) {
		int arr[] = new int[]{5,7,9,10,11,13,14,33}; 
        int p = searchkey(arr,10); 
          
        if (p==-1) 
           System.out.println("-1");
        else
            System.out.println(p);
	}
	public static int binarySearch(int arr[],int key) 
    { 
        int low=0;
        int high=arr.length-1;
        while(low<=high) 
        { 
            int mid = low + (high - low)/2; 
            if (arr[mid] == key) 
                return mid; 
            else if (arr[mid] > key) 
                high=mid-1;
            else
                low=mid+1;
        } 
        return -1; 
    } 
    public static int searchkey(int arr[],int key)  
    { 
        int low = 0;
        int high = 1; 
        int val=arr[0];
        while (val < key) 
        { 
            low = high ;
            if(2*high < arr.length-1) 
               high = 2*high;              
            else
               high = arr.length-1; 
              
            val = arr[high]; 
        } 
  
        return binarySearch(arr,key); 
    } 
}



