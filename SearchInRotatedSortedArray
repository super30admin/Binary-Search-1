//time complexity : log(n)
//space complexity : O(1)
//successfully executed on leetcode
class SearchInRotatedSortedArray {
    public int search(int[] nums, int target) {
        int left =0;
        int right= nums.length-1;

    if(nums== null){
        return -1;
    }

    while(left<=right){
        int mid = left+(right-left)/2;
        if(nums[mid]==target){
            return mid;
        }
        //left sorted array
        //checking whether left half is sorted or not
        if(nums[left]<=nums[mid]){
            if(nums[left]<=target && target<nums[mid]){
                right= mid-1;
            }
            else{
                left= mid+1;
            }
        }
        //right sorted array
        else{
             if(nums[mid]<target && target<=nums[right]){
                left= mid+1;
            }
            else{
                right= mid-1;
            }
        }
       
    }     
     return -1;
    }
}
