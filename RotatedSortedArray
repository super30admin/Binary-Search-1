// Time Complexity :O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
class Solution {
    public int search(int[] nums, int target) {
        int low =0 ;
        int high = nums.length -1 ;
        if(nums == null || nums.length == 0){
            return -1; 
        }
        
        while(low <= high){
            int mid = low + (high - low)/2; // to avoid integer overflow; 
            if(nums[mid] == target){
                return mid; 
            }
            else{
                if(nums[low] <= nums[mid]){ //to check if first half is sorted

                    if(target >= nums[low] &&target < nums[mid]){ 
                        high = mid -1;
                    }else{
                        low = mid + 1; 
                    }
                }else{
                    if(target > nums[mid] && target <= nums[high]){
                         low = mid + 1;   
                    }else{
                        high = mid -1;
                    }
                }  
            }
        }
        
      return -1;  
    }
}