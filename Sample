// Search in 2D Array

// Time Complexity : O(logmn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    private boolean findElement(int[][] matrix, int target, int index){
        int low = 0;
        int high = matrix[0].length - 1;

        while(low <= high){
            int mid = low + (high - low) / 2;
            if(matrix[index][mid] == target)
                return true;
            else if(matrix[index][mid] < target)
                low = mid + 1;
            else high = mid - 1;
        }
        return false;
    }

    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 1)
            return findElement(matrix, target, 0);
        int n = matrix.length;
        int m = matrix[0].length-1;
        int low = 0;
        int high = matrix.length-1;
        int index = -1;

        while(low <= high){
            int mid = low + (high - low) / 2;
            if(matrix[mid][0] == target)
                return true;

            if(target >= matrix[mid][0] && target <= matrix[mid][m]){
                index = mid;
                break;
            }

            else if(target < matrix[mid][0])
                high = mid - 1;
            else low = mid + 1;
        }
        
        if(index == -1)
            return false;
        
        return findElement(matrix, target, index);
    }
}


// Your code here along with comments explaining your approach in three sentences only

// Search in Rotated Sorted Array

// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Did not fully understand the concept when I tried to code myself. Watched the lecture again, cleared my doubts and was able to solve the question

class Solution {

    private int sortedSearch(int[] nums, int target, int low, int high){
        while(low <= high){
            int mid = low + (high - low) / 2;
            if(nums[mid] == target)
                return mid;
            else if(target > nums[mid])
                low = mid + 1;
            else high = mid - 1;
        }
        return -1;
    }

    public int search(int[] nums, int target) {
        int len = nums.length;
        int low = 0;
        int high = len-1;
    
        while(low <= high){
            int mid = low + (high - low) / 2;
            if(nums[mid] == target)
                return mid;
            if(nums[low] <= nums[high])
                return sortedSearch(nums, target, low, high);
            if(nums[low] <= nums[mid]){
                if(target >= nums[low] && target <= nums[mid])
                    high = mid - 1;
                else low = mid + 1;
            } else {
                if(target >= nums[mid] && target <= nums[high])
                    low = mid + 1;
                else high = mid - 1;
            }
        }
        return -1;
    }
}

// Search in a Sorted Array of Unknown size

// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    public int search(ArrayReader reader, int target) {
        int low = 0;
        int high = 1;

        while(target < reader.get(low) || target > reader.get(high)){
            if(reader.get(high) == Integer.MAX_VALUE)
                return -1;
            low = high;
            high = high * 2;
        }

        while(low <= high){
            int mid = low + (high - low) / 2;
            if(reader.get(mid) == target)  
                return mid;
            else if(target > reader.get(mid))
                low = mid + 1;
            else high = mid - 1;
        }
        return -1;
    }
}


