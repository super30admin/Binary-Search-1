class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length; //row length
        int n = matrix[0].length; //column length
        
        int low = 0; //lowest index value;
        int high = m*n-1; // index value highest
        
        while(low<=high) 
        {
            int mid = low + (high-low)/2; //changed as to avoid overthrown exception as discussed in class
            if(target==matrix[mid/n][mid%n]) //mid/n-->row num && min%n --> column num
            {
                return true;
            }
            else if(target>matrix[mid/n][mid%n])
            {
                low = mid+1; //increment low index as target is greater than the element
            }
            else
            {
                high = mid-1; //decrement high as target is less than the element
            }
        }
        return false;
    }
}


//Approach : Binarysearch tree
//time : O(log(mn))
//space : O(1) // doubt here  ----- 
//ran successfully on leetcode but faced a problem while getting the row and column-- struggled for that logic

