// Time Complexity :
//Problem_1 : O(log n) 
//Problem_2 : O(log n)

// Space Complexity :
//Problem_1 : O(1)
//Problem_2 : O(1)

// Did this code successfully run on Leetcode :
Yes

// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
Problem_1 : 
In rotated sorted array, we first calculate the mid of the array. Here, one side of the array is sorted.
In sorted array we check if the target lies in the sorted array.
	(1) If true, then we apply binary search to the range of elements.
If not, then low pointer is shifted to mid + 1 and repeat the process.
If target is not found, -1 is returned.

Problem_2 :
Here low pointer is shifted to high pointer and high pointer is shifted by twice the value until the target is greater than the high pointer.
Once the target is lower than high pointer, we apply binary search to the range of elements between low and high to search the index of element.
If target is not found, -1 is returned. 