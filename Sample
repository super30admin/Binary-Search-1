// Time Complexity :o(logn)
// Space Complexity :o(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach
/**
 * // This is ArrayReader's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface ArrayReader {
 *     public int get(int index) {}
 * }
 */

class Solution {
    
    
    public int binarysearch(ArrayReader a, int low,int high,int target)
    {
         while(low<=high)
         {
            int mid = (low+high)/2; 
             
            if(a.get(mid)==target)
                return mid;
            else if(a.get(mid)>target)
                 high=mid-1;
            else
                 low=mid+1;

         }
        return -1; 
    }
    
    public int search(ArrayReader reader, int target) {
        int i=1;
        if(reader.get(0)==target)
            return 0;

          while(reader.get(i)<target ) { 
              i=2*i;
          } 
        
            if(reader.get(i)==target){
                return i;
            }
            

            if(reader.get(i)>target || (reader.get(i)==2147483647) )
            {
                i=i/2;
                return binarysearch(reader,i,2*i,target);
            }
        
        
        
        return -1;
        
    }
}

// Time Complexity :o(logn)
// Space Complexity :o(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no

class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high = nums.length-1;
        while(low<=high)
        {
          int mid=(low+high)/2;  
          if(nums[mid]==target)
              return mid;
          else if(nums[low]<=nums[mid])
          {
              if((nums[low]<=target) && (target<=nums[mid]) )
                       high=mid-1;
              else  
                      low=mid+1; 
           } 
           else
           {
               if((nums[mid]<=target) && (target<=nums[high]) )
                       low=mid+1;
               else  
                        high=mid-1; 
               
           } 
        }
        
        
        
      return -1;  
        
    }
}