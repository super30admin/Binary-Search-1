Problem-74(Search a 2D matrix)
// Time Complexity :O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :YES
// Any problem you faced while coding this :NO


// Your code here along with comments explaining your approach
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        if(matrix==null || matrix.length==0) return false;
        int low,high;
        low=0;
        high=(matrix.length*matrix[0].length)-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            int row=mid/matrix[0].length;
            int column=mid%matrix[0].length;
            if(matrix[row][column]==target)
            {
                return true;
            }
            else if(matrix[row][column]>target)
            {
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
            
        }
        return false;
        
    }
}










Problem-33(Search in rotated sorted array)
// Time Complexity :O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :YES
// Any problem you faced while coding this :NO


// Your code here along with comments explaining your approach
class Solution {
    public int search(int[] nums, int target) {
       if(nums==null || nums.length==0) return -1;
        int low,high;
        low=0;
        high=nums.length-1;
        //null
        //start b.s
            //calculate mid
            //check which side is sorted
                //if mid==target
                
        while(low<=high)
        {
            int mid=low+(high-low)/2; //to prevent integer overflow
            if(nums[mid]==target)
            {
                    return mid;
            }
            else if(nums[mid]>=nums[low])
            {
                
                if(nums[mid]>target && nums[low]<=target)
                {
                    high=mid-1;
                }
                else
                {
                    low=mid+1;
                }
            }
            else
            {
                
                if(nums[mid]<target && nums[high]>=target)
                {
                    low=mid+1;
                }
                else
                {
                    high=mid-1;
                }
            }
        }
        return -1;
    
    }
    
}
