// ## Problem1 
// Search a 2D Matrix(https://leetcode.com/problems/search-a-2d-matrix/)
// Time Complexity : 0(log mn)
// Space Complexity : 0(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : I didnt face any problem while coding this.

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0) return false;
        int m = matrix.length;
        int n = matrix[0].length;
        int low = 0;
        int high = m * n - 1;
        
        while(low <= high){
            int mid = low + (high - low)/2;
            int row = mid / n;
            int col = mid % n; 
            if(matrix[row][col] == target){
                return true;
            }else{
                if(matrix[row][col] > target){
                    high = mid - 1;
                }else{
                    low = mid + 1;
                }
            }
        }
        return false;
    }
}

// ## Problem 2 
// Search in a Rotated Sorted Array (https://leetcode.com/problems/search-in-rotated-sorted-array/)
// Time Complexity : 0(log n)
// Space Complexity : 0(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : I didnt face any problem while coding this.


// Your code here along with comments explaining your approach in three sentences only
class Solution {
    public int search(int[] nums, int target) {
        int length = nums.length;
        int low = 0;
        int high = length - 1;
        
        while(low <= high){
            //saving integer overflow
            //find mid element
            int midElement = low + (high - low) / 2;
            if(nums[midElement] == target){
                return midElement;
            }
            else if(nums[midElement] >= nums[low]){
                if(target >= nums[low] && target < nums[midElement]){
                    high = midElement - 1;
                }else{
                    low = midElement + 1;
                }
            }else{
                if(target <= nums[high] && target > nums[midElement]){
                    low = midElement + 1;
                }else{
                    high = midElement - 1;
            }
            }
        }
            return -1;
    }
}

// ## Problem 3 
// Search in Infinite sorted array:https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size/
// Time Complexity : 0(log n)
// Space Complexity : 0(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : I didnt face any problem while coding this.

class Solution {
  public int search(ArrayReader reader, int target) {
    if (reader.get(0) == target) return 0;

    //as we dont know the length of the array
    //initialize left and right
    int low = 0, high = 1;
    while (reader.get(high) < target) {
      low = high;
      //right shift value
      high = high * 2;
    }

    //we got the range of low and high - searching the value
    int midVal;
    int num;
    while (low <= high) {
      midVal = low + ((high - low) / 2);
      num = reader.get(midVal);

      if (num == target) return midVal;
      if (num > target) high = midVal - 1;
      else low = midVal + 1;
    }

    return -1;
  }
}