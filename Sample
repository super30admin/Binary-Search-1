// Time Complexity :
// Space Complexity :
// Did this code successfully run on Leetcode :
// Time Complexity : O(log n)
// Space Complexity : O(1) // Constant
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
Key Considerations - 
  - Check if one part of array is sorted (either left or right of mid element)
  - Check if the target element lies in the sorted part of array
  - if it resides in sorted part of array perform Binary Search by moving low and high pointers and find the mid which is equal to target
  - else if it resides in unsorted part of array then validate the target element 
  - if the target not available in both the arrays then return -1.


==============================Solution ==========================================
class Solution {
    public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0 ) 
            return -1;

        int low = 0;
        int high = nums.length - 1; 

        while(low<= high){
            int mid = low + (high - low)/2;
            if(nums[mid] == target) 
                return mid;

            else if(nums[low] <= nums[mid]){
                if(nums[low] <= target && nums[mid] >= target){
                    high = mid-1;
                }else{
                    low = mid+1;
                }
            }else {
                if(nums[mid] <= target && nums[high] >= target){
                    low = mid+1;
                }else{
                    high = mid-1;
                }
            }

        }
        return -1;
    }
}
