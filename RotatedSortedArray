// Time Complexity :O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :Yes it took me time to find the logic


// Your code here along with comments explaining your approach
class Solution {
    public int search(int[] nums, int target) {
        int low=0;
        int high=nums.length-1;
        while(low<=high){
            int mid=high+(low-high)/2;
            if(nums[mid]==target) return mid;
            if(nums[mid]>=nums[low]) {//if mid value is greater than low left side of mid is sorted
                if(target>=nums[low]&&target<=nums[mid]) high=mid-1;
                else low=mid+1;
            }
            else{//if mid value is less than low right side of mid is sorted
                if(target>=nums[mid]&&target<=nums[high]) low=mid+1;
                else high=mid-1;
            }

        }
        return -1;

    }
}