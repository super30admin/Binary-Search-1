// Time Complexity : O(log N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach: Using Binary Search in the solution, assumed that it is 1D array and not 2D array, then got the exact index of row and column by dividing mid by no of columns - 1 and column by mod of mid by no. of columns and then shifting right or left accordingly

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if len(matrix) == 0:
            return false
        
        m = len(matrix)
        n = len(matrix[0])
        left = 0
        right = m*n - 1
        
        while left <= right:
            mid = left + (right - left) // 2
            getRow = mid // n
            getColumn = mid % n
            if matrix[getRow][getColumn] == target:
                return True
            elif(target > matrix[getRow][getColumn]):
                left = mid + 1
            else:
                right = mid - 1
        return False