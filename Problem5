// Time Complexity : O(log n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : One case failed on Leetcode [3,1], target 1, fixed it by changing > to >=


// Your code here along with comments explaining your approach

class Solution {
    public int search(int[] nums, int target) {
        
        int n = nums.length;
        int l = 0;
        int r  = n-1;
        int mid;
        //Very similliar to Binary search, where we keep searching until the list is empty
        while (l <= r)
        {
            mid = (l + r) / 2;
            if (nums[mid] == target)
                return mid;
            //Determine if the left half of the list is sorted, if it is, then check if target is in that range.
            // if target is in range, then right index moves to mid -1 else left index moves to mid + 1 (very simillar to binary search)
            else if (nums[mid] >= nums[l])
                
            {
              if(target<=nums[mid] && target>=nums[l])
                  r = mid-1;
                else
                    l=mid + 1;
                
                
            }
              else
            //if the left part of the list is not sorted, then the right side is, hence check if target present in right side range. Based on the outcome update
            // left index (l) or right index (r)
              {
                  
                  if (target>=nums[mid] && target<=nums[r])
                      l = mid+1;
                  else 
                      r = mid-1;

              }
 
        }
        
        
         return -1;

    }
}
