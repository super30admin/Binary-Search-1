// Time Complexity :
// Space Complexity :
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

// ********************************************************************************
// Search in 2D matrix 
/* Using Recursion */
// Time Complexity :log(mn)
// Space Complexity :o(1)
// Did this code successfully run on Leetcode : Yes
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
       return recursiveMatrix(matrix,target,0,(matrix.length)*(matrix[0].length)-1);   // call to created function.
    }
    
    public boolean recursiveMatrix(int [][] matrix, int target,int low,int high){
        if(low>high){                       // terminating condition if the high crosses low then loop/recursion will break 
            return false;
        }
        
        int mid = low +(high-low)/2;  
        // this will give row              
        int row = mid /matrix[0].length;        
        int column = mid % matrix[0].length;        // this will give column of matrix
        
        if(matrix[row][column] == target){                     //first check if mid value is equal to target if yes we can return true.
            return true;
        }else if(matrix[row][column] < target){                 //  check if mid value is small than target if yes move low
            return recursiveMatrix(matrix,target,mid+1,high);       
        }else{
            return recursiveMatrix(matrix,target,low,mid-1);    // if mid is greater than target then change high.
        }
    }
}

/* using iteration */

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int low=0;
        int high =(matrix.length)*(matrix[0].length)-1;
        
        while(low<=high){
            int mid = low+(high-low)/2;
            int row = mid/matrix[0].length;
            int column = mid % matrix[0].length;
            
            if(matrix[row][column]==target){
                return true;
            }else if(matrix[row][column]<target){
                low = mid+1;
            }else{
                high=mid-1;
            }
         }
        return false;
    }
}

// ***************************************************************************************************************************

/* Search in a Sorted Array of Unknown Size */

// Time Complexity :log(n)
// Space Complexity :o(1)
// Did this code successfully run on Leetcode : Yes

class Solution {
    public int search(ArrayReader reader, int target) {
        int low = 0;
        int high = 1;
        while(low<=high){
            if(reader.get(high)== target){
                return high;
            }
            
            if(reader.get(high)<target){
                    low = high;
                    high = 2*high;
            }else{
                int mid=low+(high-low)/2;
                if(reader.get(mid)==target){
                    return mid;
                }else if(reader.get(mid)<target){
                    low = mid+1;
                }else{
                    high = mid-1;
                }
            }
        }
        return -1;
    }
}

// **************************************************************************************************************************

// Search in roteted sorted array 

class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length-1;
        
        while(left <= right){
            int mid = left +(right-left)/2;
            if(nums[mid]==target){
                return mid;
            }
            
            if(nums[left]<=nums[mid]){
                if(target >= nums[left] && target <= nums[mid]){
                    right = mid-1;
                }else{
                    left = mid +1;
                }
            }else{
                if(target>= nums[mid] && target <= nums[right]){
                    left = mid + 1;
                }else{
                    right = mid -1;
                }
            }
        }
        return -1;
    }
}