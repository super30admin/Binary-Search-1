// Time Complexity : O(log n) - Binary search is performed to find element   
// Space Complexity : O(1) - No extra space is used
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach


class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length -1;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] >= nums[left]){
                if(nums[left] <= target && target < nums[mid]){
                    right = mid -1;
                }else{
                    left = mid +1;
                }
            }else if(nums[mid] <= nums[right]){
                if(nums[right] >= target && target > nums[mid]){
                    left = mid +1;
                }else{
                    right = mid -1;
                }
            }
        }
        
        return -1;
    }
}